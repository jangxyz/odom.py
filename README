ODOM(Object DOM)

    A simple DOM wrapper object making access to child nodes easy.


    EXAMPLE

        <?xml version="1.0" encoding="UTF-8" ?>
        <painting>
            <img src="madonna.jpg" alt='Foligno Madonna, by Raphael'/>
            <caption>This is Raphael's "Foligno" Madonna, painted in
                <date>1511</date>â€“<date>1512</date>.
            </caption>
        </painting>

    to parse the above xml in traditional DOM api style, you must do sumoething like

        doc.firstChild.childNodes[3].childNodes[1].firstChild.nodeValue

    in order to get date value '1511'. 
    If you know the tag names in advance, you could also go like this

        doc.getElementsByTagName('painting')[0]
            .getElementsByTagName('caption')[0]
            .getElementsByTagName('date')[0]
            .firstChild.nodeValue

    while this is universal and mostly work on any platform and languages, 
    it is quite annoying. With odom, you can simply write

        doc.painting.caption.date[0]._text
        
    simple, huh?
    


    PARSE

    Parse a string to create an ODOM object.

        ODOM().parse(xml_string)


    CHILD NODES

    You can access a child node by

        node.ChildNodeTagName

    where ChildNodeTagName is the tag name of the child node.
    Chaining is easy

        node.ChildNodeTagName.GrandsonTagName

    and it returns a list of ODOM objects if there are siblings with same 
    tag name.

        node.ChildNodeTagName.GrandsonTagName[0]


    ATTRIBUTES

    Attributes are inside _attr,

        node._attr.href
        node._attr.title

    where href and title is the name of the attribute.


    TEXT

    Since ODOM has only ElementNode and AttributeNode in DOM terms,
    you cannot access to a 'TextNode'.
    However, you can read inner text with _text,

        node._text

    This will read appropriate text data if node had TextNode as a single 
    child. Note it doesn't behave that way when having multiple child nodes.


    DOM

    DOM members are not directly accessible because it may interfere with
    the tag name of child node, but you could still access to original dom
    object with _dom.

        node._dom.getElementsByTagName('childNodeTagName')[0]


